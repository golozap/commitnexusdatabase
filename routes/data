const express = require("express");
const multer = require("multer");
const Folder = require("../models/Folder");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const QRCode = require("qrcode");

const router = express.Router();

// üìÇ Multer Storage Configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = path.join(__dirname, "../uploads");
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname);
  },
});

const upload = multer({ storage });

// üìå 1Ô∏è‚É£ Upload Folder & Files (POST)
router.post("/upload", upload.array("files"), async (req, res) => {
  console.log(`[${new Date().toISOString()}] üì§ Upload request received.`);

  try {
    if (!req.files || req.files.length === 0) {
      console.log(`[${new Date().toISOString()}] ‚ùå No files uploaded.`);
      return res.status(400).json({ error: "No files uploaded" });
    }

    // ‚úÖ Generate a Unique Folder Code
    const folderCode = crypto.randomInt(1000, 9999).toString();
    console.log(`[${new Date().toISOString()}] üî¢ Folder code: ${folderCode}`);

    const folderPath = path.join(__dirname, "../uploads", folderCode);
    if (!fs.existsSync(folderPath)) {
      fs.mkdirSync(folderPath, { recursive: true });
    }

    let fileResponses = [];

    for (let file of req.files) {
      console.log(`[${new Date().toISOString()}] üîπ Processing file: ${file.originalname}`);

      const fileDestination = path.join(folderPath, file.originalname);
      fs.renameSync(file.path, fileDestination);

      const fileUrl = `https://commitdatabase.vercel.app/api/folders/${folderCode}`;

      const newFile = new Folder({
        name: file.originalname,
        type: "file",
        path: fileDestination,
        size: file.size,
        code: folderCode,
        url: fileUrl,
      });

      await newFile.save();
      fileResponses.push({ name: file.originalname, url: fileUrl });
    }

    // ‚úÖ Generate QR Code for the Folder URL
    const folderUrl = `https://commitdatabase.vercel.app/api/folders/${folderCode}`;
    const qrCodePath = path.join(folderPath, `${folderCode}.png`);
    await QRCode.toFile(qrCodePath, folderUrl);
    console.log(`[${new Date().toISOString()}] üì∏ QR Code generated: ${qrCodePath}`);

    res.status(201).json({
      message: "Folder uploaded successfully",
      folderCode,
      folderUrl,
      files: fileResponses,
      qrCode: `https://commitdatabase.vercel.app/api/folders/${folderCode}/qr`,
    });
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ‚ùå Upload error:`, error);
    res.status(500).json({ error: error.message });
  }
});



// üìå Get QR Code for a Folder (GET)
router.get("/folders/:code/qr", async (req, res) => {
  console.log(`[${new Date().toISOString()}] üîç Fetching QR Code for: ${req.params.code}`);

  try {
    const qrCodePath = path.join(__dirname, "../uploads", req.params.code, `${req.params.code}.png`);

    if (!fs.existsSync(qrCodePath)) {
      console.log(`[${new Date().toISOString()}] ‚ùå QR Code not found for: ${req.params.code}`);
      return res.status(404).send("QR Code not found.");
    }

    res.sendFile(qrCodePath);
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ‚ùå QR Code retrieval error:`, error);
    res.status(500).send("Server error.");
  }
});



// üìå Get Folder Contents by Unique Code (GET)
router.get("/folders/:code", async (req, res) => {
  console.log(`[${new Date().toISOString()}] üîç Fetching folder: ${req.params.code}`);

  try {
    const folderPath = path.join(__dirname, "../uploads", req.params.code);

    // ‚ùå Check if folder exists & it's a directory
    if (!fs.existsSync(folderPath) || !fs.lstatSync(folderPath).isDirectory()) {
      console.log(`[${new Date().toISOString()}] ‚ùå Invalid folder: ${req.params.code} is not a directory.`);
      return res.status(404).send("Folder not found or is not a directory.");
    }

    // ‚úÖ Read files from the folder
    const files = fs.readdirSync(folderPath);

    // ‚ùå If folder exists but has no files
    if (files.length === 0) {
      return res.status(404).send("No files found in this folder.");
    }

    // ‚úÖ Generate file URLs
    const fileLinks = files.map(file => ({
      name: file,
      url: `${req.protocol}://${req.get("host")}/api/download/${req.params.code}/${encodeURIComponent(file)}`
    }));

    res.send(`
      <html>
        <head>
          <title>Files in Folder ${req.params.code}</title>
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
            .file-list { text-align: left; max-width: 500px; margin: auto; }
            a { display: block; margin: 10px 0; color: #007bff; text-decoration: none; font-size: 16px; }
          </style>
        </head>
        <body>
          <h2>üìÇ Folder ${req.params.code}</h2>
          <p>Click a file to download:</p>
          <div class="file-list">
            ${fileLinks.map(file => `<a href="${file.url}" download>${file.name}</a>`).join("")}
          </div>
        </body>
      </html>
    `);
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ‚ùå Folder retrieval error:`, error);
    res.status(500).send("Server error.");
  }
});


// üìå 3Ô∏è‚É£ Download Specific File from Folder (GET)
router.get("/download/:code/:filename", async (req, res) => {
  console.log(`[${new Date().toISOString()}] üì• Download request: ${req.params.filename}`);

  try {
    const folderPath = path.join(__dirname, "../uploads", req.params.code);
    const filePath = path.join(folderPath, req.params.filename);

    // ‚ùå Check if the file exists
    if (!fs.existsSync(filePath)) {
      console.log(`[${new Date().toISOString()}] ‚ùå File not found: ${req.params.filename}`);
      return res.status(404).send("File not found.");
    }

    console.log(`[${new Date().toISOString()}] ‚úÖ Serving file: ${req.params.filename}`);
    res.download(filePath);
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ‚ùå File download error:`, error);
    res.status(500).send("Server error.");
  }
});


module.exports = router;
