const express = require("express");
const multer = require("multer");
const Folder = require("../models/Folder");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const QRCode = require("qrcode");


const router = express.Router();

// üìÇ Multer Storage Configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = path.join(__dirname, "../uploads");
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const uniqueFilename = `${Date.now()}-${file.originalname}`;
    cb(null, uniqueFilename);
  },
});

const upload = multer({ storage });

// üìå 1Ô∏è‚É£ Upload Folder & Files (POST)

router.post(
  "/upload",
  upload.fields([
    { name: "files", maxCount: 100 },
    { name: "filenames", maxCount: 1 },
    { name: "filepaths", maxCount: 1 },
    { name: "filesize", maxCount: 1 },
  ]),
  async (req, res) => {
    console.log(`[${new Date().toISOString()}] üì§ Upload request received.`);

    try {
      // Extract the uploaded files and the raw data (filenames, filepaths, filesize)
      const uploadedFiles = req.files["files"];
      const filenamesRaw = req.body.filenamesRaw;
      const filepathsRaw = req.body.filepathsRaw;
      const filesizeRaw = req.body.filesizeRaw;

      // If there are no uploaded files or missing required data, return an error
      if (!uploadedFiles || uploadedFiles.length === 0 || !filenamesRaw) {
        console.log(`[${new Date().toISOString()}] ‚ùå No files or paths uploaded.`);
        return res.status(400).json({ error: "No files or paths uploaded" });
      }

      // Parse the raw data from the frontend (filenames, filepaths, and filesize)
      const filenames = JSON.parse(filenamesRaw);
      const filepaths = JSON.parse(filepathsRaw);
      const filesize = JSON.parse(filesizeRaw);

      console.log("üìÇ Received Paths Array:", filenames);

      // ‚úÖ Generate a Unique Folder Code
      const folderCode = crypto.randomInt(1000, 9999).toString();
      console.log(`[${new Date().toISOString()}] üî¢ Folder code: ${folderCode}`);

      const folderPath = path.join(__dirname, "../uploads", folderCode);
      if (!fs.existsSync(folderPath)) {
        fs.mkdirSync(folderPath, { recursive: true });
      }

      let filesToSave = [];

      // Process each uploaded file
      for (let i = 0; i < uploadedFiles.length; i++) {
        const file = uploadedFiles[i];
        const relativeFilePath = filepaths[i]; // e.g., "1/2.1/file.txt"
        const fullSavePath = path.join(folderPath, relativeFilePath); // uploads/1234/1/2.1/file.txt
        const fileDir = path.dirname(fullSavePath);

        // Create subdirectories if they do not exist
        fs.mkdirSync(fileDir, { recursive: true });

        // Move uploaded file to the correct path
        fs.renameSync(file.path, fullSavePath);

        // Add file details to filesToSave array
        filesToSave.push({
          filename: filenames[i],     // Full filename (e.g., "file.txt")
          filepath: relativeFilePath, // Relative path (e.g., "1/2.1/file.txt")
          filesize: filesize[i],      // File size (in bytes)
        });

        console.log(`[${new Date().toISOString()}] ‚úÖ Saved: ${relativeFilePath}`);
      }

      // Save folder & files to MongoDB
      const newFolder = new Folder({
        folderName: folderCode,
        files: filesToSave,
      });

      await newFolder.save();

      // Generate QR Code for the Folder URL
      const folderUrl = `${req.protocol}://${req.get("host")}/api/folders/${folderCode}`;
      const qrCodePath = path.join(folderPath, `${folderCode}.png`);
      await QRCode.toFile(qrCodePath, folderUrl);
      console.log(`[${new Date().toISOString()}] üì∏ QR Code generated: ${qrCodePath}`);

      // Respond with folder details and the QR code URL
      res.status(201).json({
        message: "Folder uploaded successfully",
        folderCode,
        folderUrl,
        files: filesToSave,
        qrCode: `${req.protocol}://${req.get("host")}/api/folders/${folderCode}/qr`,
      });
    } catch (error) {
      console.error(`[${new Date().toISOString()}] ‚ùå Upload error:`, error);
      res.status(500).json({ error: error.message });
    }
  }
);



// üìå Get QR Code for a Folder (GET)
router.get("/folders/:code/qr", async (req, res) => {
  console.log(`[${new Date().toISOString()}] üîç Fetching QR Code for: ${req.params.code}`);

  try {
    const qrCodePath = path.join(__dirname, "../uploads", req.params.code, `${req.params.code}.png`);

    if (!fs.existsSync(qrCodePath)) {
      console.log(`[${new Date().toISOString()}] ‚ùå QR Code not found for: ${req.params.code}`);
      return res.status(404).send("QR Code not found.");
    }

    res.sendFile(qrCodePath);
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ‚ùå QR Code retrieval error:`, error);
    res.status(500).send("Server error.");
  }
});

// üìå Get Folder Contents by Unique Code (GET)
router.get("/folders/:code", async (req, res) => {
  console.log(`[${new Date().toISOString()}] üîç Fetching folder: ${req.params.code}`);

  try {
    const folderPath = path.join(__dirname, "../uploads", req.params.code);

    // ‚ùå Check if folder exists & it's a directory
    if (!fs.existsSync(folderPath) || !fs.lstatSync(folderPath).isDirectory()) {
      console.log(`[${new Date().toISOString()}] ‚ùå Invalid folder: ${req.params.code} is not a directory.`);
      return res.status(404).send("Folder not found or is not a directory.");
    }

    // ‚úÖ Read files from the folder
    const files = fs.readdirSync(folderPath);

    // ‚ùå If folder exists but has no files
    if (files.length === 0) {
      return res.status(404).send("No files found in this folder.");
    }

    // ‚úÖ Generate file URLs
    const fileLinks = files.map(file => ({
      name: file,
      url: `${req.protocol}://${req.get("host")}/api/download/${req.params.code}/${encodeURIComponent(file)}`
    }));

    res.send(`
      <html>
        <head>
          <title>Files in Folder ${req.params.code}</title>
          <style>
            body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
            .file-list { text-align: left; max-width: 500px; margin: auto; }
            a { display: block; margin: 10px 0; color: #007bff; text-decoration: none; font-size: 16px; }
          </style>
        </head>
        <body>
          <h2>üìÇ Folder ${req.params.code}</h2>
          <p>Click a file to download:</p>
          <div class="file-list">
            ${fileLinks.map(file => `<a href="${file.url}" download>${file.name}</a>`).join("")}
          </div>
        </body>
      </html>
    `);
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ‚ùå Folder retrieval error:`, error);
    res.status(500).send("Server error.");
  }
});


// üîÅ Recursive file structure reader
// const walkDir = (dirPath, baseUrl, folderCode, relative = "") => {
//   let results = [];
//   const list = fs.readdirSync(dirPath);

//   list.forEach(item => {
//     const fullPath = path.join(dirPath, item);
//     const relPath = path.join(relative, item);
//     const stat = fs.statSync(fullPath);

//     if (stat.isDirectory()) {
//       // üìÅ Subfolder ‚Äî keep digging
//       results = results.concat(walkDir(fullPath, baseUrl, folderCode, relPath));
//     } else {
//       // üìÑ File ‚Äî store with relative path and download URL
//       results.push({
//         name: item,
//         path: relPath.replace(/\\/g, "/"),
//         url: `${baseUrl}/api/download/${folderCode}/${encodeURIComponent(relPath.replace(/\\/g, "/"))}`,
//       });
//     }
//   });

//   return results;
// };



// Function to recursively walk through the directory and get file details
function walkDir(folderPath, baseUrl, folderCode) {
  const fileArray = [];

  // Read all files and subdirectories inside the folder
  fs.readdirSync(folderPath).forEach(file => {
    const filePath = path.join(folderPath, file);
    const fileStat = fs.lstatSync(filePath);

    // If it's a directory, recurse into it
    if (fileStat.isDirectory()) {
      fileArray.push(...walkDir(filePath, baseUrl, folderCode));
    } else {
      // If it's a file, push the file details to the array
      fileArray.push({
        originalname: file,
        filename: file,
        filePath: path.join(baseUrl, 'uploads', folderCode, file), // Construct the full URL for the file
      });
    }
  });

  return fileArray;
}

router.get("/folders/retrive/:code", async (req, res) => {
  const folderCode = req.params.code;
  const baseUrl = `${req.protocol}://${req.get("host")}`;

  console.log(`[${new Date().toISOString()}] üìÇ Retrieving folder ${folderCode}`);

  try {
    // Find the folder document by its folderName (folder code)
    const folder = await Folder.findOne({ folderName: folderCode });

    if (!folder) {
      return res.status(404).json({ error: "Folder not found." });
    }

    // Map each file to include download URL
    const filesWithUrl = folder.files.map(file => ({
      filename: file.filename,
      filepath: file.filepath,
      filesize: file.filesize,
      url: `${baseUrl}/api/download/${folderCode}/${encodeURIComponent(file.filepath)}`
    }));

    // Respond with updated data
    res.json({
      folderCode: folder.folderName,
      totalFiles: folder.files.length,
      files: filesWithUrl,
    });
  } catch (err) {
    console.error(`[${new Date().toISOString()}] ‚ùå Error retrieving folder:`, err);
    res.status(500).json({ error: "Server error." });
  }
});







// üìå 3Ô∏è‚É£ Download Specific File from Folder (GET) ‚Äî Supports subfolder paths
router.get("/download/:code/*", async (req, res) => {
  const folderCode = req.params.code;
  const fileRelativePath = req.params[0]; // captures full subpath like "1/2/file.txt"
  const filePath = path.join(__dirname, "../uploads", folderCode, fileRelativePath);

  const safeBase = path.resolve(__dirname, "../uploads", folderCode);
  const safePath = path.resolve(filePath);

  // ‚ùå Prevent path traversal attacks
  if (!safePath.startsWith(safeBase)) {
    return res.status(403).send("Access denied.");
  }

  if (!fs.existsSync(safePath)) {
    console.log(`[${new Date().toISOString()}] ‚ùå File not found: ${fileRelativePath}`);
    return res.status(404).send("File not found.");
  }

  console.log(`[${new Date().toISOString()}] ‚úÖ Serving file: ${fileRelativePath}`);
  res.download(safePath);
});




module.exports = router;
