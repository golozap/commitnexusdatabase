const express = require("express");
const multer = require("multer");
const Folder = require("../models/Folder");
const fs = require("fs");
const path = require("path");
const crypto = require("crypto");
const QRCode = require("qrcode");

const router = express.Router();

// 📂 Multer Storage Configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = path.join(__dirname, "../uploads");
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const uniqueFilename = `${Date.now()}-${file.originalname}`;
    cb(null, uniqueFilename);
  },
});

const upload = multer({ storage });

// 📌 1️⃣ Upload Folder & Files (POST)
router.post("/upload", upload.array("files"), async (req, res) => {
  console.log(`[${new Date().toISOString()}] 📤 Upload request received.`);

  try {
    if (!req.files || req.files.length === 0) {
      console.log(`[${new Date().toISOString()}] ❌ No files uploaded.`);
      return res.status(400).json({ error: "No files uploaded" });
    }

    const folderCode = crypto.randomInt(1000, 9999).toString();
    console.log(`[${new Date().toISOString()}] 🔢 Folder code: ${folderCode}`);

    const folderPath = path.join(__dirname, "../uploads", folderCode);
    if (!fs.existsSync(folderPath)) {
      fs.mkdirSync(folderPath, { recursive: true });
    }

    let fileResponses = [];

    for (let file of req.files) {
      console.log(`[${new Date().toISOString()}] 🔹 Processing file: ${file.originalname}`);

      const fileDestination = path.join(folderPath, file.filename);
      fs.renameSync(file.path, fileDestination);

      const fileUrl = `${req.protocol}://${req.get("host")}/api/folders/${folderCode}`;

      const newFile = new Folder({
        name: file.filename,
        type: "file",
        path: fileDestination,
        size: file.size,
        code: folderCode,
        url: fileUrl,
      });

      await newFile.save();
      fileResponses.push({ name: file.filename, url: fileUrl });
    }

    const folderUrl = `${req.protocol}://${req.get("host")}/api/folders/${folderCode}`;
    const qrCodePath = path.join(folderPath, `${folderCode}.png`);
    await QRCode.toFile(qrCodePath, folderUrl);
    console.log(`[${new Date().toISOString()}] 📸 QR Code generated: ${qrCodePath}`);

    res.status(201).json({
      message: "Folder uploaded successfully",
      folderCode,
      folderUrl,
      files: fileResponses,
      qrCode: `${req.protocol}://${req.get("host")}/api/folders/${folderCode}/qr`,
    });
  } catch (error) {
    console.error(`[${new Date().toISOString()}] ❌ Upload error:`, error);
    res.status(500).json({ error: error.message });
  }
});

// 📌 Get QR Code for a Folder (GET)
router.get("/folders/:code/qr", async (req, res) => {
  const qrCodePath = path.join(__dirname, "../uploads", req.params.code, `${req.params.code}.png`);
  if (!fs.existsSync(qrCodePath)) {
    return res.status(404).send("QR Code not found.");
  }
  res.sendFile(qrCodePath);
});

// 📌 Recursive folder structure
function buildFolderTree(currentPath, baseUrl) {
  const stats = fs.statSync(currentPath);
  if (!stats.isDirectory()) {
    return null;
  }

  const name = path.basename(currentPath);
  const children = fs.readdirSync(currentPath).map((item) => {
    const itemPath = path.join(currentPath, item);
    const itemStats = fs.statSync(itemPath);

    if (itemStats.isDirectory()) {
      return buildFolderTree(itemPath, baseUrl);
    } else {
      return {
        name: item,
        type: "file",
        size: itemStats.size,
        url: `${baseUrl}/api/download/${path.basename(currentPath)}/${encodeURIComponent(item)}`,
      };
    }
  });

  return {
    name,
    type: "folder",
    children: children.filter(Boolean),
  };
}

// 📌 Get Recursive Folder Structure (GUI Tree JSON API)
router.get("/folders/tree/:code", async (req, res) => {
  const folderPath = path.join(__dirname, "../uploads", req.params.code);
  if (!fs.existsSync(folderPath) || !fs.lstatSync(folderPath).isDirectory()) {
    return res.status(404).json({ error: "Folder not found or is not a directory." });
  }

  const folderTree = buildFolderTree(folderPath, `${req.protocol}://${req.get("host")}`);
  res.json({ folderCode: req.params.code, ...folderTree });
});

// 📌 Get Folder Contents by Unique Code (Simple HTML)
router.get("/folders/:code", async (req, res) => {
  const folderPath = path.join(__dirname, "../uploads", req.params.code);
  if (!fs.existsSync(folderPath) || !fs.lstatSync(folderPath).isDirectory()) {
    return res.status(404).send("Folder not found or is not a directory.");
  }

  const files = fs.readdirSync(folderPath);
  if (files.length === 0) {
    return res.status(404).send("No files found in this folder.");
  }

  const fileLinks = files.map((file) => ({
    name: file,
    url: `${req.protocol}://${req.get("host")}/api/download/${req.params.code}/${encodeURIComponent(file)}`,
  }));

  res.send(`
    <html>
      <head>
        <title>Files in Folder ${req.params.code}</title>
        <style>
          body { font-family: Arial, sans-serif; text-align: center; padding: 20px; }
          .file-list { text-align: left; max-width: 500px; margin: auto; }
          a { display: block; margin: 10px 0; color: #007bff; text-decoration: none; font-size: 16px; }
        </style>
      </head>
      <body>
        <h2>📂 Folder ${req.params.code}</h2>
        <p>Click a file to download:</p>
        <div class="file-list">
          ${fileLinks.map((file) => `<a href="${file.url}" download>${file.name}</a>`).join("")}
        </div>
      </body>
    </html>
  `);
});

// 📌 Download Specific File
router.get("/download/:code/:filename", async (req, res) => {
  const folderPath = path.join(__dirname, "../uploads", req.params.code);
  const safePath = path.resolve(folderPath, req.params.filename);

  if (!safePath.startsWith(path.resolve(__dirname, "../uploads"))) {
    return res.status(403).send("Access denied.");
  }

  if (!fs.existsSync(safePath)) {
    return res.status(404).send("File not found.");
  }

  res.download(safePath);
});

module.exports = router;
